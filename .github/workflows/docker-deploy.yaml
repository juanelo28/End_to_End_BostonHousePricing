name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main  # Triggers the workflow on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build the Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

    - name: Log in to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        echo "machine api.heroku.com login ${{ secrets.HEROKU_EMAIL }} password $HEROKU_API_KEY" > ~/.netrc
        echo "machine git.heroku.com login ${{ secrets.HEROKU_EMAIL }} password $HEROKU_API_KEY" >> ~/.netrc
        chmod 600 ~/.netrc

    - name: Set Heroku stack to container
      run: heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

    - name: Push Docker container to Heroku
      run: |
        heroku container:login
        heroku container:push web --app ${{ secrets.HEROKU_APP_NAME }}

    - name: Release the Docker container on Heroku
      run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}



# What we're doing here:
# 
# Set Heroku stack to container:
# 
# The new step "Set Heroku stack to container" switches your Heroku app 
# to the container stack, which is required for Docker-based deployments.
# The command `heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}` 
# sets the app's stack to use Docker containers.
# 
# GitHub Secrets:
# 
# Make sure to have these GitHub repository secrets configured:
# - DOCKER_USERNAME: Your Docker Hub username.
# - DOCKER_PASSWORD: Your Docker Hub password or access token.
# - HEROKU_API_KEY: Your Heroku API key.
# - HEROKU_EMAIL: The email associated with your Heroku account.
# - HEROKU_APP_NAME: The name of your Heroku app.
# 
# Step-by-step explanation of the above YAML file:
# 
# Checkout the repository:
# 
# `actions/checkout@v2` checks out your repository's code.
# 
# Set up Docker Buildx:
# 
# This step sets up Docker Buildx, a tool used for building Docker images.
# 
# Log in to Docker Hub:
# 
# This logs you into Docker Hub using the credentials stored in your GitHub Secrets.
# 
# Build and push Docker image to Docker Hub:
# 
# Builds the Docker image from your Dockerfile and tags it as `my-app:latest`.
# Pushes the Docker image to your Docker Hub repository.
# 
# Log in to Heroku:
# 
# Logs in to Heroku with the Heroku API key and email configured in your GitHub Secrets.
# 
# Set the Heroku stack to container:
# 
# Switches your Heroku app's stack to the container stack, which is necessary 
# for Docker-based deployments.
# 
# Push the Docker container to Heroku:
# 
# Pushes the built Docker container to Herokuâ€™s Container Registry.
# 
# Release the Docker container on Heroku:
# 
# This step releases the Docker container as the current version of your Heroku app.
# 
# By running this YAML file as part of the GitHub Actions workflow, it's possible to fully automate 
# the process of switching to the container stack, building and pushing your Docker container, 
# and releasing it to Heroku.
